var map = L.map("map").setView([51.069537, 13.252516], 7);

map.once('focus', function() { map.scrollWheelZoom.enable(); });

L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map), (legend = L.control({
    position: "bottomright"
})).onAdd = function(e) {
    var r = L.DomUtil.create("div", "info"),
        t = ["pestizidfrei", "teilweise pestizidfrei"],
        o = ["./legend/green.PNG", "./legend/orange.PNG"];
    r.innerHTML = "<h4>Legende</h4>";
    for (var i = 0; i < t.length; i++) r.innerHTML += " <img src=" + o[i] + " height='25' width='20'> " + t[i] + "<br>";
    return r
}, legend.addTo(map);
var sidebar = L.control.sidebar("sidebar", {
    autoPan: !0,
    closeButton: !0,
    position: "left"
});
sidebar.addTo(map), map.on("click", function() {
    sidebar.hide()
}), sidebar.on("show", function() {
    console.log("Sidebar will be visible.")
}), sidebar.on("shown", function() {
    console.log("Sidebar is visible.")
}), sidebar.on("hide", function() {
    console.log("Sidebar will be hidden.")
}), sidebar.on("hidden", function() {
    console.log("Sidebar is hidden.")
}), L.DomEvent.on(sidebar.getCloseButton(), "click", function() {
    console.log("Close button clicked.")
});
var markers = L.markerClusterGroup(),
    searchLayer = L.layerGroup().addTo(map),
    legend = L.control({
        position: "bottomright"
    });

function dataForMap(e, r) {
    for (var t, o = new L.LayerGroup, i = L.ExtraMarkers.icon({
            icon: "fa-coffee",
            markerColor: "green",
            shape: "circle",
            prefix: "fa"
        }), a = L.ExtraMarkers.icon({
            icon: "fa-coffee",
            markerColor: "orange",
            shape: "circle",
            prefix: "fa"
        }), n = 0; n < e.features.length; n++) {
        var s, l, p, d = e.features[n].properties.classification,
            c = e.features[n].properties.headline,
            f = (e.features[n].properties.text, e.features[n].geometry.coordinates);
        p = (f = (f = f.toString()).split(","))[1], l = f[0], 1 == d ? s = i : 2 == d && (s = a);
        new L.LatLng(p, l);
        var b = (t = new L.Marker([p, l], {
            icon: s
        }, {
            title: c
        })).feature = t.feature || {};
        b.type = "Feature", b.properties = b.properties || {}, b.properties.title = e.features[n].properties.headline, b.properties.text = e.features[n].properties.text, t.addTo(o)
    }
    o.addTo(markers), r.addLayer(markers), markers.on("click", function(e) {
        console.log("markersclick"), markers.bindPopup(e.layer.feature.properties.title), sidebar.hide(), sidebar.toggle(), sidebar.setContent("<b>" + e.layer.feature.properties.title + "</b><br><br>" + e.layer.feature.properties.text), sidebar.show(), r.setView(e.latlng, 11)
    });
    var u = new L.Control.Search({
        position: "topleft",
        layer: markers,
        propertyName: "title"
    });
    u.on("search:locationfound", function(e) {
        sidebar.hide(), sidebar.toggle(), sidebar.setContent("<b>" + e.layer.feature.properties.title + "</b><br><br>" + e.layer.feature.properties.text), sidebar.show(), r.setView(e.latlng, 11)
    }), r.addControl(u)
}
$.getJSON("./map.geojson", function(e) {
    dataForMap(e, map)
});
